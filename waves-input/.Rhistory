license()
q()
install.packages(Rlinkedin)
install.packages("Rlinkedin")
library(Rlinkedin)
help(Rlinked)
help(Rlinkedin)
library(foreign)
library(dplyr)
library(tidyr)
# set the working directory
setwd("~/Utrecht/M. Economics/Period 2/Data Project/Data New")
#start in 2005, ten years before the introduction of the minimum wage
#read in the data
bap = read.dta("bap.dta")
View(bap)
prefix_vector = c("vp", "wp", "xp", "yp", "zp", "bap", "bbp", "bcp", "bdp", "bep", "bfp")
prefix_vector = c("vp", "wp", "xp", "yp", "zp", "bap", "bbp", "bcp", "bdp", "bep", "bfp")
prefix_vector = c("vp", "wp", "xp", "yp", "zp", "bap", "bbp", "bcp", "bdp", "bep", "bfp")
var_vector = c("persnr", "hhnr", "welle", "08")
df = data.frame(persid = numeric(),
hhid = numeric(),
year = numeric(),
var1 = numeric(),
stringsAsFactors = FALSE)
View(df)
for (i in 1:length(prefix_vector)){
path = paste(prefix_vector[i], "p.dta", sep="")
temp = read.dta(path)
temp = subset(temp, var_vector)
colnames(temp) = c("persid", "hhid", "year", "var1")
do.call(rbind.data.frame, list(df, temp))
}
setwd("~/Utrecht/M. Economics/Period 2/Data Project/Data New")
for (i in 1:length(prefix_vector)){
path = paste(prefix_vector[i], "p.dta", sep="")
temp = read.dta(path)
temp = subset(temp, var_vector)
colnames(temp) = c("persid", "hhid", "year", "var1")
do.call(rbind.data.frame, list(df, temp))
}
x = paste(prefix_vector[i], "p.dta", sep="")
#Third, loop in all required files in the data frame
for (i in 1:length(prefix_vector)){
path = paste(prefix_vector[i], ".dta", sep="")
temp = read.dta(path)
temp = subset(temp, var_vector)
colnames(temp) = c("persid", "hhid", "year", "var1")
do.call(rbind.data.frame, list(df, temp))
}
View(temp)
for (i in 1:length(prefix_vector)){
path = paste(prefix_vector[i], ".dta", sep="")
temp = read.dta(path)
temp = subset(temp, select = var_vector)
colnames(temp) = c("persid", "hhid", "year", "var1")
do.call(rbind.data.frame, list(df, temp))
}
library(foreign)
library(stringr)
getwd()
setwd("~/Utrecht/M. Economics/Period 2/Data Project/Data New")
i = 1
k = 2
list_dirs = list.dirs(path = "input-data", recursive = FALSE)
list_years = str_sub(list_dirs, -4)
list_varnames = paste("merged", list_years, sep = "")
list_dirs
list_varnames
list_years
soep_selection = read.table("variable-selection/soep-feature-selection.csv", header = TRUE, sep = ";", check.names = FALSE)
soep_selection = read.table("soep-feature-selection.csv", header = TRUE, sep = ";", check.names = FALSE)
soep_selection = read.table("soep-feature-selection.csv", header = TRUE, sep = ";", check.names = FALSE)
soep_selection = read.table("soep-feature-selection.csv", header = TRUE, sep = ";", check.names = FALSE)
View(soep_selection)
close(soep_selection)
labels = soep_selection[, 1]
labels
datalist = c()
for (years in list_years) {
# Define Current List of import data based on the 'i' value
list_files = list.files(path = list_dirs[i], pattern = "", full.names = TRUE)
# Import all the data from the current list with the read.dta-Function (part of foreign package) for SPSS-Files
list_import = lapply(list_files, read.dta)
# Merge it into one file
data_merged = Reduce(function(x, y) merge(x, y, by = "persnr", all.x = TRUE), list_import)
# Cut the .x and y. values from the merge process, so that we have clean column names
colnames(data_merged) = gsub("\\.x|\\.y", "", colnames(data_merged))
# Get the feature list of the current year
current_list = sort(soep_selection[, k])
# Delete all columns where no data exists (as the surveys differed every year) -> not needed as import function excludes
# missing values shortlist = na.omit(current_list)
# ONLY take the data shortlisted for the current year
cleaned = data_merged[, which(names(data_merged) %in% current_list == TRUE)]
# Select the Label Column and the Variable Column of the current Year
soep_subcrit = c(1, k)
# Subset the Feature list so that only the label and the current year exist
soep_selection_sub = soep_selection[soep_subcrit]
# Delete NA-Values from the list
soep_selection_sub = na.omit(soep_selection_sub)
# Create a subset of the clean labels, where all codenames match, to make sure that the labels are correct
clean_labels = subset(soep_selection_sub, sort(soep_selection_sub[, 2]) == sort(names(cleaned)))
# Order Dataframe alphabetically
clean_sorted = cleaned[, order(names(cleaned))]
# Order Frame with the Labels based on the ID
ordered_colnames = clean_labels[order(clean_labels[2]), ]
# Label the columns properly
colnames(clean_sorted) = ordered_colnames[, 1]
# Assign data_merged to current merge[year]
assign(list_varnames[i], clean_sorted)
# Add Year Variable to a list so that we can access all years by a loop
datalist = c(datalist, list_varnames[i])
# Update our variables for the next round
i = i + 1
k = k + 1
}
View(soep_selection)
View(soep_selection)
library(foreign)
library(stringr)
list_files = list.files(path = list_dirs[i], pattern = "", full.names = TRUE)
list_import = lapply(list_files, read.dta)
?list.dirs
list_dirs = list.dirs(path = "waves-input", recursive = FALSE)
list_dirs = list.dirs(path = "~waves-input", recursive = FALSE)
setwd("~/Utrecht/M. Economics/Period 2/Data Project/Data New")
test = list.dirs(, recursive = FALSE)
setwd("~/Utrecht/M. Economics/Period 2/Data Project/Data New")
test = list.dirs(path = ".", recursive = FALSE)
test
list(path = C:\Users\domin\Documents\Utrecht\M. Economics\Period 2\Data Project\Data New\waves-input)
list(path = "C:\Users\domin\Documents\Utrecht\M. Economics\Period 2\Data Project\Data New\waves-input", recursive = FALSE)
getwd()
setwd("~/Utrecht/M. Economics/Period 2/Data Project/Data New/waves-input")
list_dirs = list.dirs(path = "C:/Users/domin/Documents/Utrecht/M. Economics/Period 2/Data Project/Data New", recursive = FALSE)
list_dirs
list_years = str_sub(list_dirs, -4)
list_years = str_sub(list_dirs, -4)
?str_sub
?list.dirs
list_dirs = list.dirs(path = "C:/Users/domin/Documents/Utrecht/M. Economics/Period 2/Data Project/Data New", recursive = FALSE)
list_years = str_sub(list_dirs, -4)
list_years
list_dirs = list.dirs(path = "~waves-input", recursive = FALSE)
list_dirs
list_dirs = list.dirs(path = "C:\Users\domin\Documents\Utrecht\M. Economics\Period 2\Data Project\Data New\waves-input", recursive = FALSE)
